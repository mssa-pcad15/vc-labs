@page "/queuemanagement"
@using Azure.Storage.Queues
@using Azure.Storage.Queues.Models
@rendermode InteractiveServer
@inject QueueServiceClient queueServiceClient
@inject NavigationManager _navigationManager

<h3>QueueManagement</h3>
<button @onclick="DeleteSelectedAsync">Delete Selected Queue</button>
<ul>
    @foreach (var item in queues)
    {
        <li>
            <input type="checkbox" @onchange="@((e)=>handleCheckItem(item.Name,e))"/>
            @item.Name
        </li>
    }
</ul>

<input placeholder="name of new queue"  id="queue-name" @bind="queueName"/>
<button @onclick="AddNewQueue">Add New Queue</button>
@code {
    private string queueName;
    List<QueueItem> queues = new();
    List<string> queuesToRemove = new();
    protected override async Task OnInitializedAsync()
    {
        await loadQueue();
        await base.OnInitializedAsync();
    }
    private async Task AddNewQueue()
    {
        await queueServiceClient.CreateQueueAsync(queueName);
        await loadQueue();
        this.StateHasChanged();
    }
    private async Task loadQueue()
    {
        queues.Clear();
        var result = queueServiceClient.GetQueuesAsync();

        await foreach (QueueItem item in result)
        {
            queues.Add(item);
        }
    }
    private void handleCheckItem(string queueName,ChangeEventArgs e)
    {
        if ((bool)e.Value)
        {
            queuesToRemove.Add(queueName);
        }
        else
        {
            queuesToRemove.Remove(queueName);
        }
        return;
    }
    private async Task DeleteSelectedAsync(MouseEventArgs e)
    {
        foreach (var item in queuesToRemove)
        {
            await queueServiceClient.DeleteQueueAsync(item);
        }
        queuesToRemove.Clear();
        _navigationManager.Refresh(true);
    }
}
