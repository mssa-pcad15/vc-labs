@page "/queuemanagement"
@using Azure.Storage.Queues
@using Azure.Storage.Queues.Models
@rendermode InteractiveServer
@inject QueueServiceClient queueServiceClient
@inject NavigationManager _navigationManager

<div class="container-fluid">
    <h3 class="text-lg-center">Queue Management</h3>
    <ul class="list-group m-lg-2">
        @foreach (var item in queues)
        {
            <li class="list-group-item">
                <input type="checkbox" class="form-check-input me-1" id="@item.Name" @onchange="@((e) => handleCheckItem(item.Name,e))" />
                <label class="form-check-label" for="@item.Name">
                    @item.Name
                    </label>
                    <a href="/queueitempage/@item.Name"
                       class="btn btn-link">View Details
                    </a>
            </li>
        }
    </ul>
</div>

<div class="container text-center">
    <div class="row row-cols-1">
        <div class="col">
            <input type="text" class="form-control m-lg-2 w-25" placeholder="name of new queue" id="queue-name" @bind="queueName" />
        </div>
    </div>
    <div class="row">
        <div class="col-2 ">
            <button type="button" class="btn btn-primary" @onclick="AddNewQueue">Add New Queue</button>
        </div>
        <div class="col-10 align-self-lg-end">
            <button type="button" class="btn btn-danger" @onclick="DeleteSelectedAsync">Delete Selected Queue</button>
        </div>
    </div>
</div>

@code {
    private string queueName;
    List<QueueItem> queues = new();
    List<string> queuesToRemove = new();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await loadQueue();
    }
    private async Task AddNewQueue()
    {
        if (string.IsNullOrWhiteSpace(queueName))
        {
            Console.WriteLine("Queue name cannot be empty.");
            return;
        }

        try
        {
            Console.WriteLine($"Attempting to create queue: {queueName}");
            await queueServiceClient.CreateQueueAsync(queueName);
            Console.WriteLine($"Queue '{queueName}' created successfully.");
            await loadQueue();
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while creating the queue: {ex.Message}");
        }
    }
    private async Task loadQueue()
    {
        queues.Clear();
        var result = queueServiceClient.GetQueuesAsync(QueueTraits.Metadata);

        await foreach (QueueItem item in result)
        {
            queues.Add(item);
        }
    }
    private void handleCheckItem(string queueName, ChangeEventArgs e)
    {
        if (queueName is null)
        {
            throw new ArgumentNullException(nameof(queueName));
        }

        if ((bool)e.Value)
        {
            queuesToRemove.Add(queueName);
        }
        else
        {
            queuesToRemove.Remove(queueName);
        }
    }
    private async Task DeleteSelectedAsync(MouseEventArgs e)
    {
        foreach (var item in queuesToRemove)
        {
            await queueServiceClient.DeleteQueueAsync(item);
        }
        queuesToRemove.Clear();
        _navigationManager.Refresh(true);
    }
}